name: "Terraform Database Deployment"
on:
  push:
    branches:
      - main
      - devwasabi_workflow
      - terraform
  pull_request:

# env:
#     SQLFLUFF_DIALECT: postgres
#     DOCKER_IMAGE: redgate/flyway
#         SCHEMAS: public

# Permission can be added at job level or workflow level
permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for the github bot to comment on our pull requests

jobs:

  deploy:
    name: Continuous Deployment Build
    runs-on: ubuntu-latest
    defaults:
      run: 
        shell: bash
        working-directory: .
    
    steps:
      - name: Git checkout 
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: Github-OIDC-TERRAFORM
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init 
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: ./terraform
        run: terraform init 
        #-backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Save Terraform Plan
        if: success()
        run: echo "${{ steps.plan.outputs.stdout }}" > tfplan.tf

      - name: Terraform Apply # get's triggered only when there's a push (or merge) request to the main branch
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' 
        run: terraform apply -auto-approve -input=false tfplan
